# Ultralytics YOLO ðŸš€, AGPL-3.0 license

import torch

from ultralytics.models.yolo.detect import DetectionValidator
from ultralytics.utils import ops

__all__ = ["NASValidator"]


class NASValidator(DetectionValidator):
    """
    Ultralytics YOLO NAS Validator for object detection.

    Extends `DetectionValidator` from the Ultralytics models package and is designed to post-process the raw predictions
    generated by YOLO NAS models. It performs non-maximum suppression to remove overlapping and low-confidence boxes,
    ultimately producing the final detections.

    Attributes:
        args (Namespace): Namespace containing various configurations for post-processing, such as confidence and IoU thresholds.
        lb (torch.Tensor): Optional tensor for multilabel NMS.

    Example:
        ```python
        from ultralytics import NAS

        model = NAS('yolo_nas_s')
        validator = model.validator
        # Assumes that raw_preds are available
        final_preds = validator.postprocess(raw_preds)
        ```

    Note:
        This class is generally not instantiated directly but is used internally within the `NAS` class.
    """


def postprocess(self, preds_in):
    """Apply Non-maximum suppression to prediction outputs."""
    print(f"Type of preds_in: {type(preds_in)}")
    print(f"Contents of preds_in: {preds_in}")

    if isinstance(preds_in, dict):
        # Assuming 'boxes' and 'scores' are keys in the dictionary
        boxes = preds_in.get('boxes')
        scores = preds_in.get('scores')
        # Assuming 'boxes' and 'scores' are already tensors
        preds = torch.cat((boxes, scores), -1)
    elif isinstance(preds_in, list) and len(preds_in) == 2:
        boxes, scores = preds_in
        # Assuming 'boxes' and 'scores' are already tensors
        preds = torch.cat((boxes, scores), -1)
    elif isinstance(preds_in, torch.Tensor):
        # If preds_in is already a tensor, no conversion is needed
        preds = preds_in
    else:
        raise ValueError("Unsupported preds_in format")

    print(f"Type of preds: {type(preds)}")
    print(f"Contents of preds: {preds}")

    return ops.non_max_suppression(
        preds,
        self.args.conf,
        self.args.iou,
        labels=self.lb,
        multi_label=False,
        agnostic=self.args.single_cls,
        max_det=self.args.max_det,
        max_time_img=0.5,
    )



